syntax = "proto2";

package mlflow;

import "scalapb/scalapb.proto";
import "databricks.proto";

option java_package = "org.mlflow.api.proto";
option py_generic_services = true;
option (scalapb.options) = {
  flat_package: true,
};

// Scope for secrets
enum SecretScope {
  GLOBAL = 0;
  SCORER = 1;
}

// Create or update a secret
message CreateSecret {
  option (scalapb.message).extends = "com.databricks.rpc.RPC[$this.Response]";

  // Name of the secret (encrypted on client side)
  optional string encrypted_name = 1;

  // Secret value (encrypted on client side)
  optional string encrypted_value = 2;

  // DEK encrypted with master key (encrypted on client side)
  optional string encrypted_dek = 3;

  // Scope for the secret
  optional SecretScope scope = 4 [default = GLOBAL];

  // Scope ID (required for SCORER scope, null for GLOBAL)
  optional int64 scope_id = 5;

  // Client-side hash for integrity validation
  optional string integrity_hash = 6;

  message Response {
    // Success confirmation
    optional bool success = 1;
  }
}

// List secret names for a scope
message ListSecrets {
  option (scalapb.message).extends = "com.databricks.rpc.RPC[$this.Response]";

  // Scope to list secrets from
  optional SecretScope scope = 1 [default = GLOBAL];

  // Scope ID (required for SCORER scope, null for GLOBAL)
  optional int64 scope_id = 2;

  message Response {
    // List of secret names (decrypted)
    repeated string secret_names = 1;
  }
}

// Delete a secret
message DeleteSecret {
  option (scalapb.message).extends = "com.databricks.rpc.RPC[$this.Response]";

  // Name of the secret to delete
  optional string name = 1;

  // Scope of the secret
  optional SecretScope scope = 2 [default = GLOBAL];

  // Scope ID (required for SCORER scope, null for GLOBAL)
  optional int64 scope_id = 3;

  message Response {
    // Success confirmation
    optional bool success = 1;
  }
}

service SecretsService {
  // Create or update a secret with client-side encryption.
  //
  // The client must:
  // 1. Generate a random DEK (Data Encryption Key)
  // 2. Encrypt the secret name and value with the DEK
  // 3. Encrypt the DEK with the master key
  // 4. Compute an integrity hash of the plaintext
  // 5. Send all encrypted data to the server
  //
  // The server will:
  // 1. Decrypt the DEK with the master key
  // 2. Decrypt the name and value with the DEK
  // 3. Validate the integrity hash
  // 4. Re-encrypt with server's envelope encryption
  // 5. Store in the database
  //
  // Throws ``INVALID_PARAMETER_VALUE`` if validation fails.
  // Throws ``INTERNAL_ERROR`` if encryption/decryption fails.
  //
  rpc createSecret (CreateSecret) returns (CreateSecret.Response) {
    option (rpc) = {
      endpoints: [{
        method: "POST",
        path: "/api/3.0/mlflow/secrets/create",
        since { major: 3, minor: 0 },
      }],
      visibility: PUBLIC,
      rpc_doc_title: "Create Secret",
    };
  }

  // List secret names for a scope.
  //
  // This endpoint returns ONLY the names of secrets, not their values.
  // This is intentional to prevent credential harvesting.
  //
  // Throws ``RESOURCE_DOES_NOT_EXIST`` if scope_id is invalid.
  //
  rpc listSecrets (ListSecrets) returns (ListSecrets.Response) {
    option (rpc) = {
      endpoints: [{
        method: "GET",
        path: "/api/3.0/mlflow/secrets/list",
        since { major: 3, minor: 0 },
      }],
      visibility: PUBLIC,
      rpc_doc_title: "List Secrets",
    };
  }

  // Delete a secret.
  //
  // Throws ``RESOURCE_DOES_NOT_EXIST`` if the secret does not exist.
  //
  rpc deleteSecret (DeleteSecret) returns (DeleteSecret.Response) {
    option (rpc) = {
      endpoints: [{
        method: "DELETE",
        path: "/api/3.0/mlflow/secrets/delete",
        since { major: 3, minor: 0 },
      }],
      visibility: PUBLIC,
      rpc_doc_title: "Delete Secret",
    };
  }
}
